//file:noinspection GroovyAssignabilityCheck
import dev.architectury.pack200.java.Pack200Adapter

plugins {
    id "java"
    id "cc.woverflow.loom" version "0.10.1"
    id "dev.architectury.architectury-pack200" version "0.1.3"
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
    id "net.kyori.blossom" version "1.3.0"
}

version = mod_version
group = "cc.woverflow"
archivesBaseName = mod_name.toLowerCase(Locale.ENGLISH)

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
    }
}

java {
    withSourcesJar()
}

blossom {
    def className = "src/main/kotlin/cc/woverflow/onecore/OneCore.kt"
    replaceToken("@VER@", project.version, className)
    replaceToken("@NAME@", mod_name, className)
    replaceToken("@ID@", mod_id, className)
}

loom {
    launchConfigs {
        client {
            arg("--tweakClass", "gg.essential.loader.stage0.EssentialSetupTweaker")
            arg("--mixin", "mixins.onecore.json")
        }
    }
    runConfigs {
        client {
            ideConfigGenerated = true
        }
    }
    forge {
        pack200Provider = new Pack200Adapter()
        mixinConfig("mixins.onecore.json")
        mixin.defaultRefmapName.set("mixins.onecore.refmap.json")
    }
}

repositories {
    maven { url 'https://repo.woverflow.cc/' }
}

configurations {
    include
    implementation.extendsFrom(include)
}

dependencies {
    minecraft("com.mojang:minecraft:1.8.9")
    mappings("de.oceanlabs.mcp:mcp_stable:22-1.8.9")
    forge("net.minecraftforge:forge:1.8.9-11.15.1.2318-1.8.9")
    runtimeOnly ('gg.essential:loader-launchwrapper:1.1.3') {
        transitive = false
    }
    compileOnly 'gg.essential:essential-1.8.9-forge:1933'
    compileOnly("org.spongepowered:mixin:0.8.5-SNAPSHOT")
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", version
    inputs.property "name", mod_name
    inputs.property "id", mod_id

    filesMatching("mcmod.info") {
        expand(
                "id": mod_id,
                "name": mod_name,
                "version": version
        )
    }
    filesMatching("mixins.${mod_id}.json") {
        expand("id": mod_id)
    }
}

jar {
    archiveClassifier = "deobf"
    dependsOn configurations.include
    from(configurations.include.collect { it.isDirectory() ? it : zipTree(it) }) {
        def i = 0
        filesMatching("META-INF/NOTICE*") { name = "$name.${i++}" }
        filesMatching("META-INF/LICENSE*") { name = "$name.${i++}" }
        filesMatching("META-INF/mods.toml") { name = "$name.${i++}" }
        filesMatching("LICENSE*") { name = "$name.${i++}" }
    }

    manifest.attributes(
            "ModSide": "CLIENT",
            "TweakOrder": "0",
            "MixinConfigs": "mixins.onecore.json",
            'ForceLoadAsMod': true
    )
}

sourceSets {
    main {
        output.resourcesDir = file("${buildDir}/classes/kotlin/main")
    }
}
