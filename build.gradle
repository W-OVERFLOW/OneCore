//file:noinspection GroovyAssignabilityCheck

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import dev.architectury.pack200.java.Pack200Adapter

plugins {
    id("java")
    id("cc.woverflow.loom")
    id("org.jetbrains.kotlin.jvm")
    id("com.github.johnrengelman.shadow")
    id("dev.architectury.architectury-pack200")
    id("com.replaymod.preprocess")
    id("maven-publish")
    id("net.kyori.blossom")
}

mcVersion = project.ext.mcVersion
def mcVersionStr = "${(int) (mcVersion / 10000)}.${(int) (mcVersion / 100) % 100}" + (mcVersion % 100 == 0 ? '' : ".${mcVersion % 100}")

preprocess {
    vars.put("MC", mcVersion)
    vars.put("MODERN", mcVersion >= 11600 ? 1 : 0)
    vars.put("FABRIC", mcPlatform == "fabric" ? 1 : 0)
    vars.put("MODERNFORGE", mcVersion >= 11600 && mcPlatform == "forge" ? 1 : 0)
}

version = mod_version
group = "cc.woverflow"
archivesBaseName = mod_name.toLowerCase(Locale.ENGLISH)

kotlin.jvmToolchain {
    languageVersion = JavaLanguageVersion.of(mcVersion > 11800 ? 17 : mcVersion >= 11700 ? 16 : 8)
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
    }
}

java {
    withSourcesJar()
}

blossom {
    def className = "src/main/kotlin/cc/woverflow/onecore/OneCore.kt"
    replaceToken("@VER@", project.version, className)
    replaceToken("@NAME@", mod_name, className)
    replaceToken("@ID@", mod_id, className)
}

loom {
    launchConfigs {
        client {
            if (mcVersion < 11600) {
                arg("--tweakClass", "gg.essential.loader.stage0.EssentialSetupTweaker")
            }
            arg("--mixin", "mixins.onecore.json")
        }
    }
    runConfigs {
        client {
            ideConfigGenerated = true
        }
    }
    if (mcPlatform == "forge") {
        forge {
            pack200Provider = new Pack200Adapter()
            mixinConfig("mixins.onecore.json")
            mixin.defaultRefmapName.set("mixins.onecore.refmap.json")
        }
    }
}

repositories {
    maven { url 'https://repo.woverflow.cc/' }
}

configurations {
    include
    implementation.extendsFrom(include)
}

dependencies {
    minecraft("com.mojang:minecraft:$mcVersionStr")

    if (mcPlatform == "forge") {
        if (mcVersion < 11600) {
            mappings("de.oceanlabs.mcp:$mappingsVersion")
            compileOnly ("gg.essential:essential-${mcVersionStr}-forge:1933") {
                exclude(module: "keventbus")
            }
            runtimeOnly ('gg.essential:loader-launchwrapper:1.1.3') {
                transitive = false
            }
            runtimeOnly("me.djtheredstoner:DevAuth-forge-legacy:1.0.0")
        } else {
            include(("org.jetbrains.kotlin:kotlin-stdlib:1.6.10"))
            include(("org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.6.10"))
            include(("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.6.10"))
            include(("org.jetbrains.kotlin:kotlin-reflect:1.6.10"))
            include(("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.0"))
            include(("org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.6.0"))
            include(("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.6.0"))
            include(("org.jetbrains.kotlinx:kotlinx-serialization-core-jvm:1.3.2"))
            include(("org.jetbrains.kotlinx:kotlinx-serialization-json-jvm:1.3.2"))
            include(("org.jetbrains.kotlinx:kotlinx-serialization-cbor-jvm:1.3.2"))
            include(modApi("gg.essential:elementa-${mcVersionStr}-${mcPlatform}:${elementaVersion}"))
            include("org.dom4j:dom4j:$dom4jVersion")

            include(modApi("gg.essential:vigilance-${mcVersionStr}-${mcPlatform}:${vigilanceVersion}"))
            include("com.electronwill.night-config:core:$nightconfigVersion")
            include("com.electronwill.night-config:toml:$nightconfigVersion")

            include(modApi("gg.essential:universalcraft-${mcVersionStr}-${mcPlatform}:${universalCraftVersion}"))
            mappings(loom.officialMojangMappings())
        }
        forge("net.minecraftforge:forge:$forgeVersion")
    } else {
        mappings("net.fabricmc:yarn:$mappingsVersion:v2")
        modImplementation("net.fabricmc:fabric-loader:$loaderVersion")
        modImplementation "net.fabricmc.fabric-api:fabric-api:$fabricApiVersion"
        modImplementation("net.fabricmc:fabric-language-kotlin:$fabricLanguageKotlinVersion")
        modImplementation("com.terraformersmc:modmenu:$modMenuVersion")

        include(modApi("gg.essential:elementa-${mcVersionStr}-${mcPlatform}:${elementaVersion}"))
        include("org.dom4j:dom4j:$dom4jVersion")

        include(modApi("gg.essential:vigilance-${mcVersionStr}-${mcPlatform}:${vigilanceVersion}"))
        include("com.electronwill.night-config:core:$nightconfigVersion")
        include("com.electronwill.night-config:toml:$nightconfigVersion")

        include(modApi("gg.essential:universalcraft-${mcVersionStr}-${mcPlatform}:${universalCraftVersion}"))
    }

    include("com.github.Wyvest:keventbus:e8e05ea")
    compileOnly("org.spongepowered:mixin:0.8.5-SNAPSHOT")
    include "org.apache.httpcomponents.client5:httpclient5:5.1.3"
    include 'org.java-websocket:Java-WebSocket:1.5.2'
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "id", mod_id
    inputs.property "version", mod_version
    def java = mcVersion > 11800 ? 17 : mcVersion >= 11700 ? 16 : 8
    def compatLevel = "JAVA_${java}"
    inputs.property "java", java
    inputs.property "java_level", compatLevel
    inputs.property "mcversion", mcVersionStr

    filesMatching("mixins.${mod_id}.json") {
        expand(
                "java_level": compatLevel,
                "id": mod_id
        )
    }
    filesMatching("META-INF/mods.toml") {
        expand(
                "version": mod_version
        )
    }
    filesMatching("fabric.mod.json") {
        expand(
                "version": mod_version,
                "java": java,
                "mcversion": mcVersionStr
        )
    }
}

remapJar {
    archiveClassifier = "nodeps"
}

jar {
    archiveClassifier = "deobf-nodeps"
    manifest.attributes(
            "ModSide": "CLIENT",
            "TweakOrder": "0",
            "MixinConfigs": "mixins.onecore.json",
            'ForceLoadAsMod': true
    )
}

sourcesJar {
    exclude("cc/woverflow/onecore/internal/**")
    exclude("cc/woverflow/onecore/OneCore.**")
    exclude("mixins.onecore.json")
    exclude("fabric.mod.json")
    exclude("pack.mcmeta")
    exclude("mods.toml")
}

sourceSets {
    main {
        if (mcVersion < 11600) {
            output.resourcesDir = java.classesDirectory
        }
    }
}
tasks.register('deobfShadowJar', ShadowJar).configure {
    archiveClassifier.set('deobf')
    from(jar.archiveFile)
    configurations = [project.configurations.include]
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
}
remapJar.dependsOn deobfShadowJar
shadowJar {
    archiveClassifier.set('')
    from(remapJar.archiveFile)
    configurations = [project.configurations.include]
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
}
assemble.dependsOn shadowJar