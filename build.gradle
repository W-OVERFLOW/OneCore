//file:noinspection GroovyAssignabilityCheck

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import dev.architectury.pack200.java.Pack200Adapter

plugins {
    id "java"
    id "cc.woverflow.loom" version "0.10.6"
    id "dev.architectury.architectury-pack200" version "0.1.3"
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
    id "com.github.johnrengelman.shadow" version "7.1.0"
    id "net.kyori.blossom" version "1.3.0"
}

version = mod_version
group = "cc.woverflow"
archivesBaseName = mod_name.toLowerCase(Locale.ENGLISH)

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
    }
}

java {
    withSourcesJar()
}

blossom {
    def className = "src/main/kotlin/cc/woverflow/onecore/OneCore.kt"
    def aetherClass = "src/main/kotlin/codes/aether/aether4j/Verifier.kt"
    replaceToken("@VER@", project.version, className)
    replaceToken("@NAME@", mod_name, className)
    replaceToken("@ID@", mod_id, className)
    replaceToken("@AETHER@", aether_token, aetherClass)
}

loom {
    launchConfigs {
        client {
            arg("--tweakClass", "gg.essential.loader.stage0.EssentialSetupTweaker")
            arg("--mixin", "mixins.onecore.json")
        }
    }
    runConfigs {
        client {
            ideConfigGenerated = true
        }
    }
    forge {
        pack200Provider = new Pack200Adapter()
        mixinConfig("mixins.onecore.json")
        mixin.defaultRefmapName.set("mixins.onecore.refmap.json")
    }
}

repositories {
    maven { url 'https://repo.woverflow.cc/' }
    // mavenLocal()
}

configurations {
    include
    implementation.extendsFrom(include)
}

dependencies {
    minecraft("com.mojang:minecraft:1.8.9")
    mappings("de.oceanlabs.mcp:mcp_stable:22-1.8.9")
    forge("net.minecraftforge:forge:1.8.9-11.15.1.2318-1.8.9")
    runtimeOnly ('gg.essential:loader-launchwrapper:1.1.3') {
        transitive = false
    }
    runtimeOnly("me.djtheredstoner:DevAuth-forge-legacy:1.0.0")
    compileOnly 'gg.essential:essential-1.8.9-forge:2117'
    compileOnly("org.spongepowered:mixin:0.8.5-SNAPSHOT")
    include 'org.java-websocket:Java-WebSocket:1.5.2'
    // include 'codes.aether:Aether4j:0.0.1-alpha'
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "id", mod_id

    filesMatching("mixins.${mod_id}.json") {
        expand("id": mod_id)
    }
}

remapJar {
    archiveClassifier = "nodeps"
}

jar {
    archiveClassifier = "deobf-nodeps"
    manifest.attributes(
            "ModSide": "CLIENT",
            "TweakOrder": "0",
            "MixinConfigs": "mixins.onecore.json",
            "UsesAetherTokenAuth": true,
            'ForceLoadAsMod': true
    )
}

sourcesJar {
    exclude("cc/woverflow/onecore/websocket/**")
    exclude("cc/woverflow/onecore/OneCore.**")
    exclude("cc/woverflow/onecore/mixin/**")
    exclude("mixins.onecore.json")
}

sourceSets {
    main {
        output.resourcesDir = java.classesDirectory
    }
}
tasks.register('deobfShadowJar', ShadowJar).configure {
    archiveClassifier.set('deobf')
    from(jar.archiveFile)
    configurations = [project.configurations.include]
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
}
remapJar.dependsOn deobfShadowJar
shadowJar {
    archiveClassifier.set('')
    from(remapJar.archiveFile)
    configurations = [project.configurations.include]
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
}
assemble.dependsOn shadowJar